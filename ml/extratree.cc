/**
 * An extra-trees regression example. 
 *
 * @author fouesneau
 */
#include "extratree.hh"

/**
 * Main.
 *
 * Testing the proper implementation of the classes
 * 
 */
int main(int argc, char *argv[])
{
	// using FLOAT = double;
	using FLOAT = float;

    // Real data in double precision.
    std::vector<std::vector<FLOAT>> X ={
        {3.07985379388,1.58445781253},
        {1.91335307924,1.38055430453},
        {0.851375224213,0.951736296682},
        {1.91088826874,1.38253910346},
        {2.31748737698,1.46438262456},
        {0.951914756747,1.0076417892},
        {0.425325662902,0.592982504523},
        {1.38425737798,1.20998599453},
        {0.660152347219,0.798287989954},
        {0.948103851651,1.00744968352},
        {1.11681346457,1.11381041685},
        {0.479982451656,0.644989912489},
        {2.26876382878,1.45024540428},
        {0.75051545094,0.888433438085},
        {0.853195336669,0.95844840421},
        {0.241095205877,0.379621134498},
        {0.480742429079,0.64414193802},
        {0.368477571412,0.5246082085},
        {1.91379800146,1.37758538571},
        {0.855447596909,0.956763504645},
        {0.378606119191,0.544753053111},
        {0.852428999316,0.950128435886},
        {0.646578925723,0.803883932318},
        {0.602218492373,0.768179386924},
        {0.455631948289,0.625098230302},
        {0.240759650966,0.404412621836},
        {0.428222840876,0.606551983189},
        {0.400048066999,0.55967825841},
        {0.945710417903,1.00166370808},
        {2.98366359001,1.57400129808},
        {0.439541980669,0.616725456366},
        {1.62939498793,1.29098165753},
        {0.429027645868,0.590298466853},
        {0.377556980376,0.545189183051},
        {2.72252997092,1.53654274543},
        {0.415354972788,0.587559452774},
        {0.338225533611,0.502303150597},
        {1.35272313346,1.20325432065},
        {0.399260840355,0.560355492862},
        {1.05443271967,1.06502690864},
        {1.00358240645,1.03383386969},
        {2.16169829277,1.43374562171},
        {0.946783624411,1.00073066251},
        {0.780158447379,0.89825624957},
        {1.11940271243,1.11178892103},
        {1.04916975051,1.0643478322},
        {0.477489050473,0.655617862744},
        {0.398596604903,0.56828636888},
        {1.11796305303,1.11290217911},
        {0.597457469025,0.747507539935},
        {0.732417299766,0.860391470771},
        {0.408034559343,0.567322471451},
        {0.522261337389,0.682686493378},
        {0.392637034275,0.5755411704},
        {0.686053265948,0.842552130706},
        {1.87367242096,1.37014991513},
        {0.49086769918,0.678210110907},
        {0.622693245328,0.774332088838},
        {2.85835936175,1.55676873365},
        {0.740565391765,0.864461980183},
        {0.259219556196,0.410990501466},
        {0.34438481959,0.510077885819},
        {0.65119455184,0.794412996109},
        {0.757990039026,0.878262370088},
        {1.94107640189,1.3845871645},
        {1.71625355964,1.31561975057},
        {0.708723897529,0.836504137918},
        {0.397089382683,0.562647433338},
        {0.545547509135,0.706319810789},
        {0.576428722858,0.753332918596},
        {0.478452960139,0.64675132466},
        {0.854264614792,0.948783033846},
        {1.05200447624,1.0655001349},
        {0.676496421663,0.835836960709},
        {0.917142889471,1.00141005041},
        {2.06195688913,1.41277330589},
        {0.438738681301,0.617049168976},
        {0.756664136833,0.879638535504},
        {0.880770447903,0.94885135072},
        {1.72166035246,1.32049597717},
        {0.605358489528,0.754715728748},
        {0.576966020242,0.735788572512},
        {0.306940587411,0.45968682462},
        {2.15979238651,1.43542624498},
        {0.570754251056,0.726794773093},
        {0.468489402118,0.640360127111},
        {0.437359548634,0.618258597206},
        {1.49280878073,1.25463376763},
        {2.16178089923,1.43437775006},
        {0.429529126279,0.594781225227},
        {1.85696871265,1.37188438333},
        {0.780183891998,0.897963751072},
        {1.07139499284,1.08449200095},
        {1.27215646726,1.1591800469},
        {2.9000637222,1.56273533859},
        {0.32170345297,0.476648986342},
        {0.320080643985,0.478040878502},
        {1.63652737885,1.29697737159},
        {2.83876494341,1.55443668034},
        {0.946030313326,1.00081370155},
    };
    std::vector<FLOAT> y = {5662.39, 5767.66, 5861.38, 5767.66, 4864.07,
        3630.11 , 5284.45 , 4623.81 , 4581.42 , 4876.38 , 3583.72 , 5526.43 , 3810.66 , 
        5956.62 , 6151.77 , 6591.74 , 5526.43 , 5700.29 , 4987.64 , 6151.77 , 5767.66 , 
        5861.38 , 5807.64 , 5997.91 , 5874.89 , 6384.28 , 6309.57 , 5482.77 , 5081.6  , 
        5807.64 , 5970.35 , 4251.15 , 5284.45 , 5767.66 , 5420.01 , 5223.96 , 5688.53 , 
        5861.38 , 5482.77 , 6095.37 , 4742.42 , 5915.62 , 5081.6  , 4954.5  , 3583.72 , 
        5874.89 , 5888.44 , 5847.9  , 3583.72 , 4987.71 , 5128.61 , 5649.37 , 5058.25 , 
        6180.16 , 6223.0  , 6397.35 , 6194.41 , 4466.84 , 5821.03 , 4446.31 , 6309.57 , 
        6356.88 , 4415.7  , 4745.4  , 5821.03 , 4517.1  , 4797.33 , 5482.77 , 4852.89 , 
        6237.35 , 5526.43 , 3999.45 , 5821.03 , 6854.88 , 6471.43 , 5482.77 , 5970.35 , 
        4745.4  , 4295.36 , 4055.09 , 4570.88 , 5093.31 , 6081.35 , 6053.41 , 5164.16 , 
        5223.96 , 5970.35 , 5984.12 , 5915.62 , 5296.63 , 6546.36 , 4954.5  , 6338.7  , 
        3970.86 , 6067.36 , 5984.12 , 5984.12 , 3881.5  , 6230.88 , 5081.6
    };

    std::vector<FLOAT> Xtest = {0.399349190169384, 0.5610400033912842};
    FLOAT ytest = 5482.77;

    size_t n_estimators = 50;
    size_t n_splits = 20; 
    size_t n_min = 1;
    long seed = 1654;

    /* 
    // Test Single tree
    std::cout << "Single tree test" << std::endl;
    extratrees::ExtraTree<FLOAT> tree (n_min, n_splits, seed);
    tree.fit(X, y);
    FLOAT ypred = tree.predict(Xtest);
    std::cout << " Prediction: " << ypred << std::endl;
    std::cout << " True value: " << ytest << std::endl;
    */

    // Test forest 
    std::cout << "Forest test" << std::endl;
    extratrees::ExtraTreesRegressor<FLOAT,FLOAT> R(n_estimators, n_min, n_splits, seed);
	// R.fit_bootstrap(X, y);
    R.fit(X, y);
    std::vector<FLOAT> fypred = R.predict(Xtest);
    // mean and stddev of the pdf
    FLOAT m = 0;
    FLOAT s = 0;
    for (FLOAT val: fypred){
		m += val;
    }
    m /= fypred.size();
    for (FLOAT val: fypred){
		s += (val - m) * (val - m);
    }
    s = std::sqrt(s / fypred.size());

    std::cout << " Prediction: " << m  
		  << " +/- " << s    << std::endl;
    std::cout << " True value: " << ytest << std::endl;

    return 0;
}
